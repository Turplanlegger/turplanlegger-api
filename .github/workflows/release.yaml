name: New Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - turplanlegger/__about__.py

jobs:
  publish-new-release:
    name: Publish new GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create tags and GitHub Releases
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login for bot
        run: |
          git config --global user.email "$secrets.TURPLANLEGGER_BOT_EMAIL"
          git config --global user.name "Turplanlegger Bot"

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.TAG_SIGNING_KEY_ASC }}
          passphrase: ${{ secrets.TAG_SIGNING_KEY_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Get version
        run: echo "NEW_VERSION=$(grep -v '^#' turplanlegger/__about__.py | cut -d'=' -f2 | xargs)" >> "$GITHUB_ENV"

      - name: Create new tag
        run: |
          git tag -sam "Release v$NEW_VERSION" "$NEW_VERSION"
          git push origin "$NEW_VERSION"
          echo "Tag \`$NEW_VERSION\` \`$(git rev-parse -q --verify $NEW_VERSION)\` created" >> $GITHUB_STEP_SUMMARY

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ env.NEW_VERSION }}" \
            --title "Release ${{ env.NEW_VERSION }}" \
            --generate-notes \
            --latest \
            docker-compose.yml \
            docker-compose.dev.yml

  build-and-push-docker-image:
    name: Build and publish Docker image to GitHub Packages
    runs-on: ubuntu-latest
    needs: publish-new-release
    permissions:
      packages: write # To push new containers to GitHub Packages
    env:
      REGISTRY: ghcr.io
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          context: git
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=pep440,pattern={{version}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  check-api-version:
    name: Check if the new version is running
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if new API-version is deployed
        env:
          API_URL: ${{ secrets.PROD_API_URL }}
        run: |
          echo '```bash' | tee -a $GITHUB_STEP_SUMMARY
          ./deploy/check_version.sh | tee -a $GITHUB_STEP_SUMMARY
          echo '```' | tee -a $GITHUB_STEP_SUMMARY
