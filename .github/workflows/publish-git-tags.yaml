name: Create and publish a Github tag

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - ci/*

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-and-publish-new-tags:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.DEPLOY_TOKEN }}
      
      - name: Login for bot
        id: login
        run: |
          git config --global user.email "$secrets.TURPLANLEGGER_BOT_EMAIL"
          git config --global user.name "Turplanlegger Bot"
          echo "${{ secrets.TAG_SIGNING_KEY_ASC }}" > key.asc
          echo "${{ secrets.TAG_SIGNING_KEY_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --import key.asc
          dd if=/dev/urandom of=key.asc bs=512 count=1
          git config --global user.signingkey 46E5CFF7EF8A12AD
          export GPG_TTY=$(tty)

      - name: Get tags from repository
        id: released_tag
        run: echo "RELEASED_VERSION=$(git tag --list | sort -V | grep -v latest | head -n 1 | xargs)" >> $GITHUB_ENV

      - name: Get repo version 
        id: new_tag
        run: echo "NEW_VERSION=$(cat turplanlegger/__about__.py | cut -d'=' -f2 | xargs)" >> $GITHUB_ENV

      - name: Check if tag exists and and fail if it does
        id: new_sha
        run: |
          if git rev-parse -q --verify $NEW_VERSION; then
            echo "Tag \`$NEW_VERSION\` exists, will not create new" >> $GITHUB_STEP_SUMMARY;
            exit 1
          else
            echo "Tag \`$NEW_VERSION\` does not exists, will create new tag" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

      - name: Create new tag
        id: create_tag
        run: |
          export GPG_TTY=$(tty)
          echo $GPP_TTY
          git tag -sam "Release v$NEW_VERSION" $NEW_VERSION
          git push --tags
          echo "Tag \`$NEW_VERSION\` \`$(git rev-parse -q --verify $NEW_VERSION)\` created" >> $GITHUB_STEP_SUMMARY
      
      - name: Update latest tag
        id: update_latest
        run: |
          git tag -sfam "Release v$NEW_VERSION" latest
          git push --force --tags
          echo "Tag \`latest\` updated to \`$NEW_VERSION\` \`$(git rev-parse -q --verify $NEW_VERSION)\`" >> $GITHUB_STEP_SUMMARY
